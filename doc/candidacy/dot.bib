@inproceedings{nuObj,
  author    = {Martin Odersky and
               Vincent Cremet and
               Christine R{\"o}ckl and
               Matthias Zenger},
  title     = {A Nominal Theory of Objects with Dependent Types},
  booktitle = {ECOOP},
  year      = {2003},
  pages     = {201-224},
  ee        = {http://dx.doi.org/10.1007/978-3-540-45070-2_10}
}

@inproceedings{FS,
  author    = {Vincent Cremet and
               Fran\c{c}ois Garillot and
               Sergue\"{\i} Lenglet and
               Martin Odersky},
  title     = {A Core Calculus for Scala Type Checking},
  booktitle = {MFCS},
  year      = {2006},
  pages     = {1-23},
  ee        = {http://dx.doi.org/10.1007/11821069_1}
}

@inproceedings{tribe,
  author    = {Dave Clarke and
               Sophia Drossopoulou and
               James Noble and
               Tobias Wrigstad},
  title     = {Tribe: a simple virtual class calculus},
  booktitle = {AOSD},
  year      = {2007},
  pages     = {121-134},
  ee        = {http://doi.acm.org/10.1145/1218563.1218578}
}

@inproceedings{tribalo,
  author    = {Nicholas R. Cameron and
               James Noble and
               Tobias Wrigstad},
  title     = {Tribal ownership},
  booktitle = {OOPSLA},
  year      = {2010},
  pages     = {618-633},
  ee        = {http://doi.acm.org/10.1145/1869459.1869510}
}

@inproceedings{vc,
  author    = {Erik Ernst and
               Klaus Ostermann and
               William R. Cook},
  title     = {A virtual class calculus},
  booktitle = {POPL},
  year      = {2006},
  pages     = {270-282},
  ee        = {http://doi.acm.org/10.1145/1111037.1111062}
}

@PhdThesis{lillibridge:thesis,
  author = 	 "Mark Lillibridge",
  title = 	 "Translucent Sums: A Foundation for Higher-Order Module
		  Systems",
  school = 	 "Carnegie Mellon University",
  year = 	 1996,
  address =	 "Pittsburgh, PA",
  month =	 "December"
}

@inproceedings{homl,
  author    = {Robert Harper and
               Mark Lillibridge},
  title     = {A Type-Theoretic Approach to Higher-Order Modules with Sharing},
  booktitle = {POPL},
  year      = {1994},
  pages     = {123-137},
  ee        = {http://doi.acm.org/10.1145/174675.176927}
}

@inproceedings{mixinml,
  author    = {Tom Hirschowitz and
               Xavier Leroy},
  title     = {Mixin Modules in a Call-by-Value Setting},
  booktitle = {ESOP},
  year      = {2002},
  pages     = {6-20},
  ee        = {http://dx.doi.org/10.1007/3-540-45927-8_2}
}

@inproceedings{mixml,
  author    = {Derek Dreyer and
               Andreas Rossberg},
  title     = {Mixin' up the ML module system},
  booktitle = {ICFP},
  year      = {2008},
  pages     = {307-320},
  ee        = {http://doi.acm.org/10.1145/1411204.1411248}
}

@article{step_indexed_obj,
  author    = {Catalin Hritcu and
               Jan Schwinghammer},
  title     = {A Step-indexed Semantics of Imperative Objects},
  journal   = {Logical Methods in Computer Science},
  volume    = {5},
  number    = {4},
  year      = {2009},
  ee        = {http://arxiv.org/abs/0906.1350},
  bibsource = {DBLP, http://dblp.uni-trier.de}
}

@inproceedings{ahmed06,
  author    = {Amal J. Ahmed},
  title     = {Step-Indexed Syntactic Logical Relations for Recursive and
               Quantified Types},
  booktitle = {ESOP},
  year      = {2006},
  pages     = {69-83},
  ee        = {http://dx.doi.org/10.1007/11693024_6}
}

@phdthesis{ahmed04,
  author    = {Amal J. Ahmed},
  title     = {Semantics of types for mutable state},
  school    = {Princeton University},
  year      = {2004}
}

@article{soundness,
  author    = {Andrew K. Wright and
               Matthias Felleisen},
  title     = {A Syntactic Approach to Type Soundness},
  journal   = {Inf. Comput.},
  volume    = {115},
  number    = {1},
  year      = {1994},
  pages     = {38-94},
  ee        = {http://dx.doi.org/10.1006/inco.1994.1093}
}

@book{tapl,
  author    = {Benjamin C. Pierce},
  title     = {Types and programming languages},
  publisher = {MIT Press},
  year      = {2002},
  isbn      = {978-0-262-16209-8}
}

@inproceedings{plt_redex,
  author    = {Casey Klein and
               John Clements and
               Christos Dimoulas and
               Carl Eastlund and
               Matthias Felleisen and
               Matthew Flatt and
               Jay A. McCarthy and
               Jon Rafkind and
               Sam Tobin-Hochstadt and
               Robert Bruce Findler},
  title     = {Run your research: on the effectiveness of lightweight mechanization},
  booktitle = {POPL},
  year      = {2012},
  pages     = {285-296},
  ee        = {http://doi.acm.org/10.1145/2103656.2103691}
}

@TechReport{ScalaOverview,
   abstract    = {Scala fuses object-oriented and functional programming
                 in a statically typed programming language. It is aimed
                 at the construction of components and component systems.
                 This paper gives an overview of the Scala language for
                 readers who are familar with programming methods and
                 programming language design.},
   affiliation = {EPFL},
   institution = {EPFL},
   author      = {Odersky, Martin and Altherr, Philippe and Cremet,
                 Vincent and Dragos, Iulian and Dubochet, Gilles and Emir,
                 Burak and McDirmid, Sean and Micheloud, St√©phane and
                 Mihaylov, Nikolay and Schinz, Michel and Spoon, Lex and
                 Stenman, Erik and Zenger, Matthias},
   details     = {http://infoscience.epfl.ch/record/85634},
   documenturl = {http://infoscience.epfl.ch/record/85634/files/ScalaOverview.pdf},
   keywords    = {components; programming language design; type systems;
                 web services; functional programming; object-oriented
                 programming; XML processing},
   oai-id      = {oai:infoscience.epfl.ch:85634},
   oai-set     = {fulltext-public},
   status      = {PUBLISHED},
   title       = {An {O}verview of the {S}cala {P}rogramming {L}anguage (2. Edition)},
   unit        = {LAMP},
   year        = 2006
}

@InProceedings{SCA,
   abstract    = {We identify three programming language abstractions for
                 the construction of reusable components: abstract type
                 members, explicit selftypes, and modular mixin
                 composition. Together, these abstractions enable us to
                 transform an arbitrary assembly of static program parts
                 with hard references between them into a system of
                 reusable components. The transformation maintains the
                 structure of the original system. We demonstrate this
                 approach in two case studies, a subject/observer
                 framework and a compiler front-end.},
   affiliation = {EPFL},
   author      = {Odersky, Martin and Zenger, Matthias},
   booktitle   = {Proceedings of {OOPSLA} 2005},
   details     = {http://infoscience.epfl.ch/record/64423},
   documenturl = {http://infoscience.epfl.ch/record/64423/files/ScalableComponent.pdf},
   location    = {San Diego},
   oai-id      = {oai:infoscience.epfl.ch:64423},
   oai-set     = {conf; fulltext; fulltext-public},
   status      = {PUBLISHED},
   title       = {Scalable {C}omponent {A}bstractions},
   unit        = {LAMP},
   year        = 2005
}