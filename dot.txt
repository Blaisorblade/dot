val root = new Any { rootThis =>
  type Unit = Any;
  val unit: Any => rootThis.Unit;

  type Boolean = Any { this =>
    val ifNat: ((rootThis.Unit => rootThis.Nat) => 
               (rootThis.Unit => rootThis.Nat) => rootThis.Nat)
  };
  val false: rootThis.Unit => rootThis.Boolean;
  val true: rootThis.Unit => rootThis.Boolean;

  type Nat = Any { this =>
    val isZero: rootThis.Unit => rootThis.Boolean;
    val pred: rootThis.Unit => rootThis.Nat;
    val succ: rootThis.Unit => rootThis.Nat;
    val add: rootThis.Nat => rootThis.Nat
  };

	val zero: rootThis.Unit => rootThis.Nat;
	val successor: rootThis.Nat => rootThis.Nat;
	val add2: rootThis.Nat => rootThis.Nat => rootThis.Nat;
	val error: rootThis.Unit => Nothing
} 
{
  val unit = \(x: Any) => val u = new root.Unit {this => }{}; u;

  val false = \(u: root.Unit) => (
    val ff = new root.Boolean { this=> } {
      val ifNat = \(t: root.Unit => root.Nat) => \(e: root.Unit => root.Nat) => e (root.unit)
    };
    ff
  );

  val true = \(u: root.Unit) => (
    val tt = new root.Boolean {this => } {
      val ifNat = \(t: root.Unit => root.Nat) => \(e: root.Unit => root.Nat) => t(root.unit)
    };
    tt
  );

  val zero = \(u: root.Unit) => (
    val zz = new root.Nat { this=> }{ 
      val isZero = \(u: root.Unit) => root.true(root.unit);
      val succ = \(u: root.Unit) => root.successor(zz);
      val pred = \(u: root.Unit) => root.error(u)
    };
    zz
  );

  val successor = \(n: root.Nat) => (
    val ss = new root.Nat {this=>}{
      val isZero = \(u: root.Unit) => root.false(root.unit);
      val succ = \(u: root.Unit) => root.successor(ss);
      val pred = \(u: root.Unit) => n;
      val add = \(other: root.Nat) => root.add2 (other) (ss)
    };
    ss
  );
	
  val add2 = \(n1: root.Nat) => \(n2: root.Nat) =>
    n1.isZero(root.unit).ifNat
     (\(u: root.Unit) => n2)
     (\(u: root.Unit) => root.add2(n1.pred(root.unit)) (n2.succ(root.unit)));

  val error = \(u: root.Unit) => root.error(u)
};

root.zero(root.unit).succ(root.unit).succ(root.unit).succ(root.unit)